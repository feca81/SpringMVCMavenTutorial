<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xmlns:tx="http://www.springframework.org/schema/tx"
     xmlns:jdbc="http://www.springframework.org/schema/jdbc"
     xmlns:context="http://www.springframework.org/schema/context"
     xsi:schemaLocation="
     http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">
	
	<!-- find jsp page -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix">
			<value>/WEB-INF/pages/</value>
		</property>
		<property name="suffix">
			<value>.jsp</value>
		</property>
	</bean>
	
	<!-- database connection -->
	<bean id="dataSource" class="org.springframework.jdbc.datasource.SimpleDriverDataSource" >
		<property name="driverClass" value="org.postgresql.Driver" />
		<property name="url" value="$jdbc:postgresql://localhost:5432/SpringMVCTutorial" />
		<property name="username" value="postgres" />
		<property name="password" value="postgres" />
	</bean>	
	
	<!-- initialize database -->
	<jdbc:initialize-database data-source="dataSource">
    	<jdbc:script location="classpath:database/SpringMVCTutorial.sql" />
    	<jdbc:script location="classpath:database/SpringMVCTutorialData.sql" />
	</jdbc:initialize-database>

    <!-- transaction manager, use JtaTransactionManager for global tx -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!-- enable component scanning and autowire (beware that this does not enable mapper scanning!) -->    
<!-- 	<context:component-scan base-package="com.springmvcmaventutorial" /> -->
   
    <!-- enable transaction demarcation with annotations -->
    <tx:annotation-driven />

    <!-- define the SqlSessionFactory -->
<!--     <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"> -->
<!--         <property name="dataSource" ref="dataSource" /> -->
<!--         <property name="typeAliasesPackage" value="com.springmvcmaventutorial.bean" /> -->
<!--     </bean> -->
    <!-- scan for mappers and let them be autowired -->
<!--     <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"> -->
<!--         <property name="basePackage" value="com.springmvcmaventutorial.dao" /> -->
<!--     </bean> -->

	<!-- mappers -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="typeAliasesPackage" value="com.springmvcmaventutorial.bean" />
        <property name="mapperLocations" value="classpath:com/springmvcmaventutorial/dao/*.xml" />
    </bean>

	<bean id="memberMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
	  <property name="mapperInterface" value="com.springmvcmaventutorial.dao.MemberMapper" />
	  <property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean>
	
	<bean id="bookMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
	  <property name="mapperInterface" value="com.springmvcmaventutorial.dao.BookMapper" />
	  <property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean>

	<bean id="rentMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
	  <property name="mapperInterface" value="com.springmvcmaventutorial.dao.RentMapper" />
	  <property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean>
	
	<bean id="commonMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
	  <property name="mapperInterface" value="com.springmvcmaventutorial.dao.CommonMapper" />
	  <property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean>

	<!-- services -->
    <bean id="memberService" class="com.springmvcmaventutorial.service.impl.MemberServiceImpl">
    	<property name="memberMapper">
            <ref local="memberMapper"/>
        </property>
    </bean>
    <bean id="bookService" class="com.springmvcmaventutorial.service.impl.BookServiceImpl">
    	<property name="bookMapper">
            <ref local="bookMapper"/>
        </property>
    </bean>
    <bean id="rentService" class="com.springmvcmaventutorial.service.impl.RentServiceImpl">
    	<property name="bookMapper">
            <ref local="bookMapper"/>
        </property>
        <property name="rentMapper">
            <ref local="rentMapper"/>
        </property>
    </bean>
    <bean id="commonService" class="com.springmvcmaventutorial.service.api.CommonService">
    	<property name="commonMapper">
            <ref local="commonMapper"/>
        </property>
    </bean>
    
	<!-- set controllers services -->
	<bean id="mainController" class="com.springmvcmaventutorial.controller.MainController">
        <property name="commonService">
            <ref local="commonService"/>
        </property>
    </bean>
    
    <bean id="bookController" class="com.springmvcmaventutorial.controller.BookController">
        <property name="bookService">
            <ref local="bookService"/>
        </property>
    </bean>
    
    <bean id="memberController" class="com.springmvcmaventutorial.controller.MemberController">
        <property name="memberService">
            <ref local="memberService"/>
        </property>
    </bean>
    
    <bean id="rentController" class="com.springmvcmaventutorial.controller.RentController">
        <property name="bookService">
            <ref local="bookService"/>
        </property>
        <property name="memberService">
            <ref local="memberService"/>
        </property>
        <property name="rentService">
            <ref local="rentService"/>
        </property>
    </bean>
</beans>